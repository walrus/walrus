#!/usr/bin/python

import os, sys, subprocess


#
# Main Program
#

# Compile the various source files
print "Compiling..."
a = subprocess.Popen(["g++", "-c", "-std=c++11", "network/src/network-linux.cpp", "-o", "network/network-linux.o"])
b = subprocess.Popen(["g++", "-c", "-std=c++11", "network/src/network-saveload-linux.cpp", "-o", "network/network-saveload-linux.o"])
c = subprocess.Popen(["g++", "-c", "-std=c++11", "linux/src/new-network.cpp", "-o", "linux/new-network.o"])
d = subprocess.Popen(["g++", "-c", "-std=c++11", "linux/src/training-set.cpp", "-o", "linux/training-set.o"])
e = subprocess.Popen(["g++", "-c", "-std=c++11", "linux/src/train.cpp", "-o", "linux/train.o"])
f = subprocess.Popen(["g++", "-c", "-std=c++11", "linux/src/evaluate.cpp", "-o", "linux/evaluate.o"])
g = subprocess.Popen(["g++", "-c", "-std=c++11", "catch-main.cpp", "-o", "catch-main.o"])
h = subprocess.Popen(["g++", "-c", "-std=c++11", "network/src/network-arduino.cpp", "-o", "network/network-arduino.o"])
i = subprocess.Popen(["g++", "-c", "-std=c++11", "network/test/network-arduino-core-tests.cpp", "-o", "network/network-arduino-core-tests.o"])
j = subprocess.Popen(["g++", "-c", "-std=c++11", "network/test/network-saveload-linux-tests.cpp", "-o", "network/network-saveload-linux-tests.o"])
k = subprocess.Popen(["g++", "-c", "-std=c++11", "network/test/network-linux-legacy-tests.cpp", "-o", "network/network-linux-legacy-tests.o"])
l = subprocess.Popen(["g++", "-c", "-std=c++11", "network/test/network-linux-core-tests.cpp", "-o", "network/network-linux-core-tests.o"])

a.wait()
if a.returncode == 1:
    sys.exit(1)
b.wait()
if b.returncode == 1:
    sys.exit(1)
c.wait()
if c.returncode == 1:
    sys.exit(1)
d.wait()
if d.returncode == 1:
    sys.exit(1)
e.wait()
if e.returncode == 1:
    sys.exit(1)
f.wait()
if f.returncode == 1:
    sys.exit(1)
g.wait()
if g.returncode == 1:
    sys.exit(1)
h.wait()
if h.returncode == 1:
    sys.exit(1)
i.wait()
if i.returncode == 1:
    sys.exit(1)
j.wait()
if j.returncode == 1:
    sys.exit(1)
k.wait()
if k.returncode == 1:
    sys.exit(1)
l.wait()
if l.returncode == 1:
    sys.exit(1)
print "Compiled all object files"

# Link the new-network object files together into an executable
o = subprocess.Popen(["g++", "linux/new-network.o", "network/network-linux.o", "network/network-saveload-linux.o", "-o", "network/new-network", "-std=c++11"]);
o.wait();
if o.returncode == 1:
    sys.exit(1)
o = subprocess.Popen(["sudo", "chmod", "u+x", "linux/new-network"])
o.wait();
if o.returncode == 1:
    sys.exit(1)
print "Compiled new-network"

# Link the train object files together into an executable
p = subprocess.Popen(["g++", "linux/train.o", "linux/training-set.o", "network/network-linux.o", "network/network-saveload-linux.o", "-o", "linux/train", "-std=c++11"]);
p.wait();
if p.returncode == 1:
    sys.exit(1)
p = subprocess.Popen(["sudo", "chmod", "u+x", "linux/train"])
p.wait();
if p.returncode == 1:
    sys.exit(1)
print "Compiled train"

# Link the evaluate object files together into an executable
q = subprocess.Popen(["g++", "linux/evaluate.o", "linux/training-set.o", "network/network-linux.o", "network/network-saveload-linux.o", "-o", "linux/evaluate", "-std=c++11"]);
q.wait();
if q.returncode == 1:
    sys.exit(1)
q = subprocess.Popen(["sudo", "chmod", "u+x", "linux/evaluate"])
q.wait();
if q.returncode == 1:
    sys.exit(1)
print "Compiled evaluate"

# Link the test object files together into an executable
r = subprocess.Popen(["g++",
                      "catch-main.o",
                      "network/network-linux-core-tests.o",
                      "network/network-arduino-core-tests.o",
                      "network/network-saveload-linux-tests.o",
                      "network/network-linux-legacy-tests.o",
                      "network/network-linux.o",
                      "network/network-saveload-linux.o",
                      "network/network-arduino.o",
                      "-o",
                      ".catch.exe",
                      "-std=c++11"]);
r.wait();
if r.returncode == 1:
    sys.exit(1)
r = subprocess.Popen(["sudo", "chmod", "u+x", "linux/run-tests"])
r.wait();
if r.returncode == 1:
    sys.exit(1)
r = subprocess.Popen(["sudo", "chmod", "u+x", "network/run-tests"])
r.wait();
if r.returncode == 1:
    sys.exit(1)
print "Compiled tests"

s = subprocess.Popen(["./init-hooks"])
s.wait()
if s.returncode == 1:
    sys.exit(1)
print "Setup git hooks"

print "Running *all* tests... (this may take a while)"
# Run the tests
t = subprocess.Popen(["./.catch.exe"]);
t.wait();
if t.returncode == 1:
    sys.exit(1)